{"version":3,"sources":["components/Panel.js","components/PlayPause.js","components/App.js","serviceWorker.js","index.js"],"names":["Panel","sound","isPlaying","clickHandler","className","onClick","src","alt","Pause","viewBox","points","Play","PlayPause","audioContext","AudioContext","soundsToLoad","loadSound","name","a","fetch","response","arrayBuffer","decodeAudioData","audioBuffer","playSound","source","createBufferSource","buffer","loop","connect","destination","start","stopSound","stop","undefined","App","useState","sounds","setSounds","loadSounds","Promise","all","map","useEffect","stopAll","s","filter","length","toggleAll","useEventListener","event","code","preventDefault","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.721707d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Panel.css\";\r\n\r\nconst Panel = ({ sound, isPlaying, clickHandler }) => (\r\n  <div className=\"Panel\" onClick={clickHandler}>\r\n    <div className=\"picture\">\r\n      <img src={`/resources/${sound}.png`} alt={sound} />\r\n    </div>\r\n    <figure className={`statusLight ${isPlaying ? \"on\" : \"off\"}`}></figure>\r\n  </div>\r\n);\r\n\r\nexport default Panel;\r\n","import React from \"react\";\r\n\r\nimport \"./PlayPause.css\";\r\n\r\nconst Pause = () => (\r\n  <svg viewBox=\"0 0 60 60\">\r\n    <polygon points=\"10,0 25,0 25,60 10,60\" />\r\n    <polygon points=\"35,0 50,0 50,60 35,60\" />\r\n  </svg>\r\n);\r\n\r\nconst Play = () => (\r\n  <svg viewBox=\"0 0 60 60\">\r\n    <polygon points=\"10,0 60,30 10,60\" />\r\n  </svg>\r\n);\r\n\r\nconst PlayPause = ({ isPlaying, clickHandler }) => (\r\n  <div className=\"PlayPause\" onClick={clickHandler}>\r\n    {isPlaying ? <Pause /> : <Play />}\r\n  </div>\r\n);\r\n\r\nexport default PlayPause;\r\n","import React, { useState, useEffect } from \"react\";\nimport useEventListener from \"@use-it/event-listener\";\nimport Panel from \"./Panel\";\nimport PlayPause from \"./PlayPause\";\n\nimport \"./App.css\";\n\nconst audioContext = new AudioContext();\n\nconst soundsToLoad = [\"trommer\", \"sang\", \"gitar\", \"dj\", \"bass\", \"ooh\"];\n\nconst loadSound = async name => {\n  const response = await fetch(`/resources/${name}.mp3`);\n  const arrayBuffer = await response.arrayBuffer();\n  const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n  return { name, audioBuffer };\n};\n\nconst playSound = sound => {\n  if (sound.isPlaying) return sound;\n  const source = audioContext.createBufferSource();\n  source.buffer = sound.audioBuffer;\n  source.loop = true;\n  source.connect(audioContext.destination);\n  source.start();\n  return { ...sound, source, isPlaying: true };\n};\n\nconst stopSound = sound => {\n  if (sound.source) {\n    sound.source.stop();\n  }\n  return { ...sound, isPlaying: false, source: undefined };\n};\n\nconst App = () => {\n  const [sounds, setSounds] = useState([]);\n\n  const loadSounds = async () => setSounds(await Promise.all(soundsToLoad.map(name => loadSound(name))));\n\n  useEffect(() => {\n    loadSounds();\n  }, []);\n\n  const toggleSound = sound => {\n    setSounds(\n      sounds.map(s => {\n        if (sound.name === s.name) {\n          return sound.isPlaying ? stopSound(sound) : playSound(sound);\n        }\n        return s;\n      })\n    );\n  };\n\n  const playAll = () => setSounds(sounds.map(s => playSound(s)));\n  const stopAll = () => setSounds(sounds.map(s => stopSound(s)));\n\n  const isPlaying = () => !!sounds.filter(s => s.isPlaying).length;\n\n  const toggleAll = () => (isPlaying() ? stopAll() : playAll());\n\n  useEventListener(\"keydown\", event => {\n    switch (event.code) {\n      case \"Space\":\n        event.preventDefault();\n        toggleAll();\n        break;\n      case \"Escape\":\n        stopAll();\n        break;\n      default:\n        break;\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Max orkester</h1>\n      <div className=\"panels\">\n        {sounds.map(s => (\n          <Panel key={s.name} sound={s.name} isPlaying={s.isPlaying} clickHandler={() => toggleSound(s)} />\n        ))}\n      </div>\n      <PlayPause isPlaying={isPlaying()} clickHandler={() => toggleAll()} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}